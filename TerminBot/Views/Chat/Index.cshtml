@{
    ViewData["Title"] = "TerminBot";
}

<!DOCTYPE html>
<html lang="hr" data-theme="auto">
<head>
    <meta charset="utf-8" />
    <title>TerminBot</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />

    <style>

        :root{
            --bg: #0f172a;           
            --panel: #111827cc;
            --bot: #f3f4f6;
            --me: #dbeafe;
            --accent: #3b82f6;
            --accent-strong:#2563eb;
            --text: #e5e7eb;
            --muted:#9ca3af;
            --border:#ffffff1a;
            --bubbleText:#0b1222;
        }

        html[data-theme="light"]{
            --bg:#f4f6fb;
            --panel:#ffffff;
            --bot:#f1f5f9;          
            --me:#e0f2fe;           
            --accent:#2563eb;
            --accent-strong:#1d4ed8;
            --text:#0f172a;
            --muted:#475569;
            --border:#0f172a22;
            --bubbleText:#0f172a;
        }

        html[data-theme="dark"]{
            --bg:#0f172a;
            --panel:#111827cc;
            --bot:#f3f4f6;
            --me:#dbeafe;
            --accent:#3b82f6;
            --accent-strong:#2563eb;
            --text:#e5e7eb;
            --muted:#9ca3af;
            --border:#ffffff1a;
            --bubbleText:#0b1222;
        }

        html,body{
            height:100%;
            margin:0;
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, "Helvetica Neue", Arial, "Noto Sans", "Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";
            background:
                radial-gradient(1000px 600px at 80% -10%, #2563eb22, transparent),
                radial-gradient(900px 500px at -10% 20%, #10b98122, transparent),
                linear-gradient(180deg, var(--bg), var(--bg));
            color: var(--text);
        }

        .wrap{ max-width: 960px; margin: 32px auto; padding: 16px; }
        .card{
            backdrop-filter: blur(10px);
            background: var(--panel);
            border: 1px solid var(--border);
            border-radius: 16px;
            box-shadow: 0 20px 60px #00000040, inset 0 1px 0 #ffffff10;
            overflow: hidden;
        }

        .header{
            display:flex; align-items:center; justify-content:space-between;
            padding: 14px 16px;
            background: linear-gradient(90deg, #111827, #0b1222);
            border-bottom: 1px solid var(--border);
        }
        html[data-theme="light"] .header{
            background: linear-gradient(90deg, #ffffff, #f8fafc);
        }

        .brand{
            display:flex; align-items:center; gap:12px;
        }
        .logo{
            display:grid; place-items:center;
            width:36px; height:36px; border-radius:10px;
            background: linear-gradient(135deg, var(--accent), var(--accent-strong));
            box-shadow: 0 6px 16px #2563eb55;
        }
        .logo svg { filter: drop-shadow(0 2px 2px #0008); }
        .title{ font-weight:700; letter-spacing:.3px; }
        .sub{ color:var(--muted); font-size:.9rem; }

        .tools{ display:flex; align-items:center; gap:8px; }
        .btn{
            display:flex; align-items:center; gap:8px;
            height:36px; padding:0 12px;
            border:1px solid var(--border); border-radius:10px;
            background: transparent; color:var(--text);
            cursor:pointer;
        }
        .btn:hover{ background:#ffffff10 }
        html[data-theme="light"] .btn:hover{ background:#00000005 }

        .chat{
            height: 66vh;
            overflow:auto;
            padding: 18px 18px 6px 18px;
            scroll-behavior:smooth;
        }

        .row{ display:flex; margin: 8px 0; }
        .row.me{ justify-content:flex-end; }
        .bubble{
            max-width: 70%;
            padding: 10px 12px 6px 12px;
            border-radius: 14px;
            line-height: 1.35;
            white-space: pre-wrap;
            animation: pop .12s ease-out;
            position: relative;
        }
        .bubble.bot{
            background: var(--bot);
            color: var(--bubbleText);
            border-top-left-radius: 4px;
        }
        .bubble.me{
            background: var(--me);
            color: var(--bubbleText);
            border-top-right-radius: 4px;
        }
        .meta{
            display:flex; gap:8px; align-items:center;
            font-size:.75rem; color:#64748b; margin-top:4px;
        }
   

        .footer{
            padding: 12px;
            border-top: 1px solid var(--border);
            background: linear-gradient(180deg, rgba(0,0,0,0.02), rgba(0,0,0,0));
        }
        .inputbar{
            display:flex; gap:10px; align-items:center;
            background:#0b1222; border:1px solid var(--border); border-radius:12px; padding: 6px;
        }
        html[data-theme="light"] .inputbar{ background:#f8fafc; }
        #txt{
            flex:1; border:none; outline:none;
            background:transparent; color:var(--text);
            padding: 8px 10px; font-size: 16px; resize:none; height:42px; line-height:22px;
        }
        #txt::placeholder{ color:#9aa6bd; }
        #send{
            display:grid; place-items:center;
            width:44px; height:44px; border-radius:10px;
            border:none; cursor:pointer;
            background: linear-gradient(135deg, var(--accent), var(--accent-strong));
            box-shadow: 0 8px 24px #2563eb55, inset 0 1px 0 #ffffff55;
            transition: transform .05s ease, filter .2s ease;
        }
        #send:active{ transform: translateY(1px); }
        #send[disabled]{ opacity:.6; filter:saturate(.2); cursor:not-allowed; }

        .hint{ padding: 8px 18px 14px 18px; color: var(--muted); font-size:.9rem; }


        .chat::-webkit-scrollbar{ width:10px }
        .chat::-webkit-scrollbar-thumb{
            background: #29415f;
            border-radius: 8px;
            border: 2px solid #0b1222;
        }
        html[data-theme="light"] .chat::-webkit-scrollbar-thumb{
            background: #cbd5e1; border-color: #f8fafc;
        }
    </style>
</head>
<body>
<div class="wrap">
    <div class="card">
        <div class="header">
            <div class="brand">
                <div class="logo" aria-hidden="true">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="#fff" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                </div>
                <div>
                    <div class="title">TerminBot</div>
                    
                </div>
                    <div class="lang-switch">
                        <button onclick="applyAndSend('language: hr')">HR</button>
                        <button onclick="applyAndSend('language: en')">EN</button>

                    </div>
            </div>

            <div class="tools">
                <button id="themeBtn" class="btn" title="Light/Dark">
                    <span id="themeIcon" aria-hidden="true">🌙</span>
                    <span id="themeText">Dark</span>
                </button>
            </div>
        </div>

        <div id="chat" class="chat" role="log" aria-live="polite" aria-label="Razgovor"></div>

            <div id="actions" style="display:flex;gap:8px;flex-wrap:wrap;padding:8px 18px;"></div>


        <div class="footer">
            <div class="inputbar">
                <textarea id="txt" placeholder="Type your message…" autocomplete="off"></textarea>
                <button id="send" title="Send" aria-label="Send">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="#fff" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"/>
                    </svg>
                </button>
            </div>
            <div class="hint">Tip: <b>Enter</b> šalje poruku • <b>Shift+Enter</b> novi red • <b>Alt+L</b> promjena teme</div>
        </div>
    </div>
</div>

<script>

  (function initTheme(){
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const saved = localStorage.getItem('theme') || 'auto';
    const current = saved === 'auto' ? (prefersDark ? 'dark' : 'light') : saved;
    document.documentElement.setAttribute('data-theme', current);
    updateThemeButton(current);
  })();

  function updateThemeButton(theme){
    const icon = document.getElementById('themeIcon');
    const text = document.getElementById('themeText');
    if(theme === 'dark'){
      icon.textContent = '🌞';
      text.textContent = 'Light';
    } else {
      icon.textContent = '🌙';
      text.textContent = 'Dark';
    }
  }

  document.getElementById('themeBtn').addEventListener('click', ()=>{
    const html = document.documentElement;
    const now = html.getAttribute('data-theme') === 'dark' ? 'light' : 'dark';
    html.setAttribute('data-theme', now);
    localStorage.setItem('theme', now);
    updateThemeButton(now);
  });


  let conversationId = localStorage.getItem('convId') || '';
  const chat = document.getElementById('chat');
  const input = document.getElementById('txt');
  const sendBtn = document.getElementById('send');

        function applyAndSend(text) {
            input.value = text;
            send();              
        }
    

        const actionsDiv = document.getElementById('actions');

        function renderActions(list) {
            actionsDiv.innerHTML = '';
            if (!Array.isArray(list) || !list.length) return;
            for (const a of list) {
                const btn = document.createElement('button');
                btn.className = 'btn';
                btn.textContent = a.title;
                btn.onclick = () => applyAndSend(a.value);
                actionsDiv.appendChild(btn);
            }
        }

  function formatTime(d){

    try { return new Intl.DateTimeFormat(undefined, { hour:'2-digit', minute:'2-digit' }).format(d); }
    catch { return d.toLocaleTimeString().slice(0,5); }
  }

  function bubble(text, who){
    const row = document.createElement('div');
    row.className = 'row ' + (who === 'me' ? 'me' : 'bot');

    const b = document.createElement('div');
    b.className = 'bubble ' + (who === 'me' ? 'me' : 'bot');

    const body = document.createElement('div');
    body.textContent = text;

    const meta = document.createElement('div');
    meta.className = 'meta';
    const t = document.createElement('time');
    t.dateTime = new Date().toISOString();
    t.textContent = formatTime(new Date());

    meta.appendChild(t);
    b.appendChild(body);
    b.appendChild(meta);

    row.appendChild(b);
    chat.appendChild(row);
    chat.scrollTop = chat.scrollHeight;
  }

  async function send(){
    const text = (input.value || '').trim();
    if(!text) return;

    bubble(text, 'me');
    input.value = '';
    input.focus();
    sendBtn.disabled = true;

    try{
      const res = await fetch('/webchat/send', {
        method: 'POST',
        headers: { 'Content-Type':'application/json' },
        body: JSON.stringify({ conversationId, text, locale: 'hr' })
      });
      const data = await res.json();
      if(data.conversationId && !conversationId){
        conversationId = data.conversationId;
        localStorage.setItem('convId', conversationId);
      }
      if (Array.isArray(data.replies) && data.replies.length){
        for(const r of data.replies) bubble(r, 'bot');
      }
      
      renderActions(data.actions || []);

    }catch(e){
      bubble('⚠️ Greška: ' + (e?.message || e), 'bot');
    }finally{
      sendBtn.disabled = false;
    }
  }


  input.addEventListener('keydown', e=>{
    if(e.key === 'Enter' && !e.shiftKey){
      e.preventDefault();
      send();
    }
  });
  sendBtn.addEventListener('click', send);


  window.addEventListener('keydown', (e)=>{
    if(e.altKey && (e.key.toLowerCase() === 'l')){
      document.getElementById('themeBtn').click();
    }
  });


bubble("👋 Bok! Ja sam TerminBot! Mogu ti rezervirati, prikazati, promijeniti ili otkazati termin.\n\n" +
    "Pokušaj, npr.:\n" +
    "• **rezerviraj 17.09. u 14:00 na Ivan, IT, 091234567**\n" +
    "• **prikaži rezervacije**\n" +
    "• **otkaži rezervaciju AB12-CD34**\n" +
    "• **usluge** (popis dostupnih usluga)", 'bot');
</script>
</body>
</html>
